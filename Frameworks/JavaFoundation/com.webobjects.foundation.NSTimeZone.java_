Compiled from "NSTimeZone.java"
public class com.webobjects.foundation.NSTimeZone extends java.util.TimeZone implements java.lang.Cloneable,java.io.Serializable,com.webobjects.foundation.NSCoding {
  public static final java.lang.String SystemTimeZoneDidChangeNotification;
  public static final java.lang.Class _CLASS;
  static final long serialVersionUID;
  protected com.webobjects.foundation.NSData _data;
  protected transient int _hashCode;
  protected transient boolean _initialized;
  protected java.lang.String _name;
  protected transient int _rawOffset;
  protected transient com.webobjects.foundation.NSMutableArray<com.webobjects.foundation.NSTimeZone$__NSTZPeriod> _timeZonePeriods;
  protected transient int _timeZonePeriodsCount;
  protected transient boolean _useDaylightTime;
  public com.webobjects.foundation.NSTimeZone();
  protected com.webobjects.foundation.NSTimeZone(java.lang.String, com.webobjects.foundation.NSData);
  public static com.webobjects.foundation.NSDictionary<java.lang.String, java.lang.String> abbreviationDictionary();
  public java.lang.Class classForCoder();
  public java.lang.Object clone();
  public static java.lang.Object decodeObject(com.webobjects.foundation.NSCoder);
  public static synchronized com.webobjects.foundation.NSTimeZone defaultTimeZone();
  public static java.lang.String[] getAvailableIDs();
  public static com.webobjects.foundation.NSTimeZone getGMT();
  public static java.util.TimeZone getDefault();
  public static com.webobjects.foundation.NSArray knownTimeZoneNames();
  public static com.webobjects.foundation.NSTimeZone localTimeZone();
  public static synchronized void resetSystemTimeZone();
  public static synchronized void setDefault(java.util.TimeZone);
  public static synchronized void setDefaultTimeZone(com.webobjects.foundation.NSTimeZone);
  public void setID(java.lang.String);
  public void setRawOffset(int);
  public static synchronized com.webobjects.foundation.NSTimeZone systemTimeZone();
  public static synchronized com.webobjects.foundation.NSTimeZone timeZoneForSecondsFromGMT(int);
  public static synchronized com.webobjects.foundation.NSTimeZone timeZoneWithName(java.lang.String, boolean);
  public static synchronized com.webobjects.foundation.NSTimeZone timeZoneWithNameAndData(java.lang.String, com.webobjects.foundation.NSData);
  public static com.webobjects.foundation.NSTimeZone _nstimeZoneWithTimeZone(java.util.TimeZone);
  public java.lang.String abbreviation();
  public java.lang.String abbreviationForTimestamp(com.webobjects.foundation.NSTimestamp);
  public com.webobjects.foundation.NSData data();
  public void encodeWithCoder(com.webobjects.foundation.NSCoder);
  public boolean equals(java.lang.Object);
  public java.lang.String getDisplayName(boolean, int, java.util.Locale);
  public java.lang.String getID();
  public int getOffset(int, int, int, int, int, int);
  int getOffset(com.webobjects.foundation.NSTimestamp);
  public int getRawOffset();
  public synchronized int hashCode();
  public boolean hasSameRules(java.util.TimeZone);
  public boolean inDaylightTime(java.util.Date);
  public boolean isDaylightSavingTime();
  public boolean isDaylightSavingTimeForTimestamp(com.webobjects.foundation.NSTimestamp);
  public boolean isEqualToTimeZone(com.webobjects.foundation.NSTimeZone);
  public java.lang.String name();
  public int secondsFromGMT();
  public int secondsFromGMTForTimestamp(com.webobjects.foundation.NSTimestamp);
  int secondsFromGMTForOffsetInSeconds(long);
  public java.lang.String toString();
  public boolean useDaylightTime();
  protected java.lang.Object readResolve() throws java.io.ObjectStreamException;
  static {};
}
