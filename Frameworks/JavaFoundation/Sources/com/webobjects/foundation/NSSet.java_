Compiled from "NSSet.java"
public class com.webobjects.foundation.NSSet<E> implements java.lang.Cloneable, java.io.Serializable, com.webobjects.foundation.NSCoding, com.webobjects.foundation._NSFoundationCollection, java.util.Set<E> {
  public static final java.lang.Class _CLASS;
  public static final com.webobjects.foundation.NSSet EmptySet;
  static final long serialVersionUID;
  private static final java.lang.String SerializationKeysFieldKey;
  protected transient int _capacity;
  protected transient int _hashtableBuckets;
  protected transient int _count;
  protected E[] _objects;
  protected transient E[] _objectsCache;
  protected transient byte[] _flags;
  protected transient int _hashCache;
  protected transient int _deletionLimit;
  protected static int _NSSetClassHashCode;
  public static final boolean CheckForNull;
  public static final boolean IgnoreNull;
  private static final java.io.ObjectStreamField[] serialPersistentFields;
  protected void _initializeSet();
  protected void _ensureCapacity(int);
  protected void _clearDeletionsAndCollisions();
  public com.webobjects.foundation.NSSet();
  public com.webobjects.foundation.NSSet(E);
  private void initFromObjects(java.lang.Object[], boolean);
  private com.webobjects.foundation.NSSet(E[], boolean);
  public com.webobjects.foundation.NSSet(E[]);
  public com.webobjects.foundation.NSSet(com.webobjects.foundation.NSArray<? extends E>);
  public com.webobjects.foundation.NSSet(com.webobjects.foundation.NSSet<? extends E>);
  public com.webobjects.foundation.NSSet(java.util.Set<? extends E>, boolean);
  public com.webobjects.foundation.NSSet(java.util.Collection<? extends E>);
  protected E[] objectsNoCopy();
  public int count();
  public java.lang.Object member(java.lang.Object);
  public com.webobjects.foundation.NSSet<E> setByIntersectingSet(com.webobjects.foundation.NSSet<?>);
  public com.webobjects.foundation.NSSet<E> setBySubtractingSet(com.webobjects.foundation.NSSet<?>);
  public com.webobjects.foundation.NSSet<E> setByUnioningSet(com.webobjects.foundation.NSSet<?>);
  public boolean containsObject(java.lang.Object);
  public boolean intersectsSet(com.webobjects.foundation.NSSet);
  public boolean isSubsetOfSet(com.webobjects.foundation.NSSet);
  private boolean _equalsSet(com.webobjects.foundation.NSSet);
  public boolean isEqualToSet(com.webobjects.foundation.NSSet);
  public boolean equals(java.lang.Object);
  public E anyObject();
  public E[] _allObjects();
  public com.webobjects.foundation.NSArray<E> allObjects();
  public java.util.Enumeration<E> objectEnumerator();
  public java.lang.Class classForCoder();
  public static java.lang.Object decodeObject(com.webobjects.foundation.NSCoder);
  public void encodeWithCoder(com.webobjects.foundation.NSCoder);
  public int _shallowHashCode();
  public int hashCode();
  public java.util.HashSet<E> hashSet();
  public java.lang.Object clone();
  public com.webobjects.foundation.NSSet<E> immutableClone();
  public com.webobjects.foundation.NSMutableSet<E> mutableClone();
  public java.lang.String toString();
  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
  private java.lang.Object readResolve() throws java.io.ObjectStreamException;
  public static final <T> com.webobjects.foundation.NSSet<T> emptySet();
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public boolean containsAll(java.util.Collection<?>);
  public java.util.Iterator<E> iterator();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public boolean add(E);
  public boolean remove(java.lang.Object);
  public boolean addAll(java.util.Collection<? extends E>);
  public boolean retainAll(java.util.Collection<?>);
  public boolean removeAll(java.util.Collection<?>);
  public void clear();
  static {};
}
