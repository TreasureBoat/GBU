Compiled from "NSTimeZone.java"
public class com.webobjects.foundation.NSTimeZone extends java.util.TimeZone implements java.lang.Cloneable,java.io.Serializable,com.webobjects.foundation.NSCoding {
  public static final java.lang.String SystemTimeZoneDidChangeNotification;
  public static final java.lang.Class _CLASS;
  private static final java.lang.String __ABBR_TABLE_NAME;
  private static final int __ABBR_TABLE_SIZE_IN_BYTES;
  private static final java.lang.String __ALIAS_TABLE_NAME;
  private static final int __ALIAS_TABLE_SIZE_IN_BYTES;
  private static final java.lang.String __GENERIC_TZ_NAME_STEM;
  private static final java.lang.String __GMT;
  private static final int __GMT_LENGTH;
  private static final java.lang.String __MINUS;
  private static final java.lang.String __PLUS;
  private static final java.lang.String __UTF8;
  private static final java.lang.String __ZONE_ARCHIVE_NAME;
  static final long serialVersionUID;
  private static final java.lang.String SerializationNameFieldKey;
  private static final java.lang.String SerializationDataFieldKey;
  private static com.webobjects.foundation.NSDictionary<java.lang.String, java.lang.String> __abbreviations;
  private static com.webobjects.foundation.NSDictionary __aliases;
  private static com.webobjects.foundation.NSTimeZone __defaultTimeZone;
  private static com.webobjects.foundation.NSTimeZone __gmt;
  private static final com.webobjects.foundation.NSNumberFormatter __hourFormatter;
  private static final com.webobjects.foundation.NSNumberFormatter __gmtHourFormatter;
  private static com.webobjects.foundation.NSSet __knownTimeZoneNames;
  private static final com.webobjects.foundation.NSMutableDictionary __knownTimeZones;
  private static final com.webobjects.foundation.__NSLocalTimeZone __localTimeZone;
  private static final com.webobjects.foundation.NSNumberFormatter __gmtMinuteFormatter;
  private static final com.webobjects.foundation.NSMutableDictionary __namesDataTable;
  private static com.webobjects.foundation.NSTimeZone __systemTimeZone;
  private static final com.webobjects.foundation.NSTimeZone$__NSTZPeriodComparator __tzPeriodComparator;
  protected com.webobjects.foundation.NSData _data;
  protected transient int _hashCode;
  protected transient boolean _initialized;
  protected java.lang.String _name;
  protected transient int _rawOffset;
  protected transient com.webobjects.foundation.NSMutableArray<com.webobjects.foundation.NSTimeZone$__NSTZPeriod> _timeZonePeriods;
  protected transient int _timeZonePeriodsCount;
  protected transient boolean _useDaylightTime;
  private static final java.io.ObjectStreamField[] serialPersistentFields;
  public com.webobjects.foundation.NSTimeZone();
  protected com.webobjects.foundation.NSTimeZone(java.lang.String, com.webobjects.foundation.NSData);
  private static int __bSearchTZPeriods(com.webobjects.foundation.NSMutableArray<com.webobjects.foundation.NSTimeZone$__NSTZPeriod>, int, double);
  private static com.webobjects.foundation.NSTimeZone __concoctFixedTimeZone(int, java.lang.String, int);
  private static int __detzcode(byte[], int);
  private static void __entzcode(int, byte[], int);
  private static void __initTimeZoneVariables();
  private static int __less2(int, int);
  private static int __less3(int, int);
  private static int __less4(int, int);
  private static int __less5(int, int);
  private static void __loadZipEntriesFromZoneArchive();
  private static int __log2(int);
  private static synchronized com.webobjects.foundation.NSTimeZone __lookupOrCreateTimeZone(java.lang.String);
  private static com.webobjects.foundation.NSMutableArray<com.webobjects.foundation.NSTimeZone$__NSTZPeriod> __parseTimeZoneData(com.webobjects.foundation.NSData);
  private static java.lang.String __replacementTimeZoneNameForName(java.lang.String, boolean);
  public static com.webobjects.foundation.NSDictionary<java.lang.String, java.lang.String> abbreviationDictionary();
  public java.lang.Class classForCoder();
  public java.lang.Object clone();
  public static java.lang.Object decodeObject(com.webobjects.foundation.NSCoder);
  public static synchronized com.webobjects.foundation.NSTimeZone defaultTimeZone();
  public static java.lang.String[] getAvailableIDs();
  public static com.webobjects.foundation.NSTimeZone getGMT();
  public static java.util.TimeZone getDefault();
  public static com.webobjects.foundation.NSArray knownTimeZoneNames();
  public static com.webobjects.foundation.NSTimeZone localTimeZone();
  public static synchronized void resetSystemTimeZone();
  public static synchronized void setDefault(java.util.TimeZone);
  public static synchronized void setDefaultTimeZone(com.webobjects.foundation.NSTimeZone);
  public void setID(java.lang.String);
  public void setRawOffset(int);
  public static synchronized com.webobjects.foundation.NSTimeZone systemTimeZone();
  public static synchronized com.webobjects.foundation.NSTimeZone timeZoneForSecondsFromGMT(int);
  public static synchronized com.webobjects.foundation.NSTimeZone timeZoneWithName(java.lang.String, boolean);
  public static synchronized com.webobjects.foundation.NSTimeZone timeZoneWithNameAndData(java.lang.String, com.webobjects.foundation.NSData);
  public static com.webobjects.foundation.NSTimeZone _nstimeZoneWithTimeZone(java.util.TimeZone);
  private synchronized void _initialize();
  public java.lang.String abbreviation();
  public java.lang.String abbreviationForTimestamp(com.webobjects.foundation.NSTimestamp);
  public com.webobjects.foundation.NSData data();
  public void encodeWithCoder(com.webobjects.foundation.NSCoder);
  public boolean equals(java.lang.Object);
  public java.lang.String getDisplayName(boolean, int, java.util.Locale);
  public java.lang.String getID();
  public int getOffset(int, int, int, int, int, int);
  int getOffset(com.webobjects.foundation.NSTimestamp);
  public int getRawOffset();
  public synchronized int hashCode();
  public boolean hasSameRules(java.util.TimeZone);
  public boolean inDaylightTime(java.util.Date);
  public boolean isDaylightSavingTime();
  public boolean isDaylightSavingTimeForTimestamp(com.webobjects.foundation.NSTimestamp);
  public boolean isEqualToTimeZone(com.webobjects.foundation.NSTimeZone);
  public java.lang.String name();
  public int secondsFromGMT();
  public int secondsFromGMTForTimestamp(com.webobjects.foundation.NSTimestamp);
  int secondsFromGMTForOffsetInSeconds(long);
  public java.lang.String toString();
  public boolean useDaylightTime();
  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
  protected java.lang.Object readResolve() throws java.io.ObjectStreamException;
  static {};
}
