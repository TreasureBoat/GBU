Compiled from "NSDictionary.java"
public class com.webobjects.foundation.NSDictionary<K, V> implements java.lang.Cloneable, java.io.Serializable, com.webobjects.foundation.NSCoding, com.webobjects.foundation.NSKeyValueCoding, com.webobjects.foundation.NSKeyValueCodingAdditions, com.webobjects.foundation._NSFoundationCollection, java.util.Map<K, V> {
  public static final java.lang.Class _CLASS;
  public static final java.lang.Class _MAP_ENTRY_CLASS;
  public static final com.webobjects.foundation.NSDictionary EmptyDictionary;
  static final long serialVersionUID;
  private static final java.lang.String SerializationKeysFieldKey;
  private static final java.lang.String SerializationValuesFieldKey;
  private static final java.lang.Class _objectArrayClass;
  protected transient int _capacity;
  protected transient int _hashtableBuckets;
  protected transient int _count;
  protected V[] _objects;
  protected transient V[] _objectsCache;
  protected transient byte[] _flags;
  protected K[] _keys;
  protected transient K[] _keysCache;
  protected transient int _hashCache;
  protected transient int _deletionLimit;
  protected static int _NSDictionaryClassHashCode;
  protected static int _NSDictionaryMapEntryHashCode;
  protected java.util.Set<K> _keySetCache;
  protected java.util.Set<java.util.Map$Entry<K, V>> _entrySetCache;
  public static final boolean CheckForNull;
  public static final boolean IgnoreNull;
  private static final java.io.ObjectStreamField[] serialPersistentFields;
  private void _copyImmutableDictionary(com.webobjects.foundation.NSDictionary<K, V>);
  void _copyMutableDictionary(com.webobjects.foundation.NSDictionary<K, V>);
  protected void _initializeDictionary();
  protected void _ensureCapacity(int);
  protected void _clearDeletionsAndCollisions();
  public com.webobjects.foundation.NSDictionary();
  public com.webobjects.foundation.NSDictionary(V, K);
  private void initFromKeyValues(java.lang.Object[], java.lang.Object[], boolean);
  private com.webobjects.foundation.NSDictionary(V[], K[], boolean);
  public com.webobjects.foundation.NSDictionary(V[], K[]);
  public com.webobjects.foundation.NSDictionary(com.webobjects.foundation.NSArray<V>, com.webobjects.foundation.NSArray<K>);
  public com.webobjects.foundation.NSDictionary(com.webobjects.foundation.NSDictionary<K, V>);
  public com.webobjects.foundation.NSDictionary(java.util.Map<K, V>, boolean);
  public com.webobjects.foundation.NSDictionary(java.util.Map<K, V>);
  public com.webobjects.foundation.NSDictionary(java.util.Dictionary, boolean);
  protected K[] keysNoCopy();
  protected V[] objectsNoCopy();
  public int count();
  public V objectForKey(java.lang.Object);
  public java.util.Hashtable<K, V> hashtable();
  public java.util.HashMap<K, V> hashMap();
  public com.webobjects.foundation.NSArray<K> allKeysForObject(java.lang.Object);
  public com.webobjects.foundation.NSArray<V> objectsForKeys(com.webobjects.foundation.NSArray<K>, V);
  private boolean _equalsDictionary(java.util.Map);
  public boolean isEqualToDictionary(com.webobjects.foundation.NSDictionary);
  public boolean equals(java.lang.Object);
  public com.webobjects.foundation.NSArray<K> allKeys();
  public com.webobjects.foundation.NSArray<V> allValues();
  public java.util.Enumeration<K> keyEnumerator();
  public java.util.Enumeration<V> objectEnumerator();
  public java.lang.Object valueForKey(java.lang.String);
  public void takeValueForKey(java.lang.Object, java.lang.String);
  public java.lang.Object valueForKeyPath(java.lang.String);
  public void takeValueForKeyPath(java.lang.Object, java.lang.String);
  public java.lang.Class classForCoder();
  public static java.lang.Object decodeObject(com.webobjects.foundation.NSCoder);
  public void encodeWithCoder(com.webobjects.foundation.NSCoder);
  public int _shallowHashCode();
  public int hashCode();
  public java.lang.Object clone();
  public com.webobjects.foundation.NSDictionary<K, V> immutableClone();
  public com.webobjects.foundation.NSMutableDictionary<K, V> mutableClone();
  public java.lang.String toString();
  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
  private java.lang.Object readResolve() throws java.io.ObjectStreamException;
  public static final <K, V> com.webobjects.foundation.NSDictionary<K, V> emptyDictionary();
  public int size();
  public boolean isEmpty();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public V get(java.lang.Object);
  public V put(K, V);
  public V remove(java.lang.Object);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public void clear();
  public java.util.Set<K> keySet();
  public java.util.Collection<V> values();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  private java.util.Set<java.util.Map$Entry<K, V>> _initMapEntrySet();
  static {};
}
