Compiled from "_NSCollectionPrimitives.java"
public class com.webobjects.foundation._NSCollectionPrimitives {
  public static final java.lang.Class _CLASS;
  public static final int IntegerNotAvailable;
  public static final java.lang.Object[] EmptyArray;
  public static final int[] EmptyIntegerArray;
  public static final byte[] EmptyByteArray;
  public static final byte EmptyFlag;
  public static final byte DeletedFlag;
  public static final byte OccupiedFlag;
  public static final byte StatusMask;
  public static final int KeyHashMask;
  public static final int NoMatchIndex;
  public static final int LESS_THAN;
  public static final int EQUAL_TO;
  public static final int GREATER_THAN;
  private static final int[] _hashTableCapacities;
  private static final int[] _hashTableNBuckets;
  private com.webobjects.foundation._NSCollectionPrimitives();
  public static final <T> T[] emptyArray();
  public static final int log2(int);
  public static final void copyIntoBuffer(byte[], int, int);
  public static final void copyIntoBuffer(byte[], int, long);
  public static final <T> T[] copyArray(T[]);
  public static final <T> T[] copyArray(T[], int);
  public static final byte[] copyArray(byte[]);
  public static final byte[] copyArray(byte[], int);
  public static final char[] copyArray(char[]);
  public static final char[] copyArray(char[], int);
  public static final short[] copyArray(short[]);
  public static final short[] copyArray(short[], int);
  public static final int[] copyArray(int[]);
  public static final int[] copyArray(int[], int);
  public static final long[] copyArray(long[]);
  public static final long[] copyArray(long[], int);
  public static final float[] copyArray(float[]);
  public static final float[] copyArray(float[], int);
  public static final double[] copyArray(double[]);
  public static final double[] copyArray(double[], int);
  private static final void _K2_sort_recur(java.lang.Object[], int, int, com.webobjects.foundation.NSComparator) throws com.webobjects.foundation.NSComparator$ComparisonException;
  public static final void K2SortArray(java.lang.Object[], int, com.webobjects.foundation.NSComparator) throws com.webobjects.foundation.NSComparator$ComparisonException;
  public static final int countObjectInArray(java.lang.Object[], int, int, java.lang.Object, boolean);
  public static final boolean containsObjectInArray(java.lang.Object[], int, int, java.lang.Object, boolean);
  public static final int findObjectInArray(java.lang.Object[], int, int, java.lang.Object, boolean);
  public static final void replaceObjectInArray(java.lang.Object[], int, int, java.lang.Object, java.lang.Object, boolean, boolean);
  public static final int removeObjectInArray(java.lang.Object[], int, int, int, java.lang.Object, boolean, boolean);
  public static final int deletionLimitForTableBuckets(int);
  public static final int hashTableBucketsForCapacity(int);
  public static final int hashTableCapacityForCapacity(int);
  public static final <K, V> K[] keysInHashTable(K[], V[], byte[], int, int);
  public static final <K, V> V[] valuesInHashTable(K[], V[], byte[], int, int);
  public static final <K, V> V findValueInHashTable(K, K[], V[], byte[]);
  public static final boolean addValueInHashTable(java.lang.Object, java.lang.Object, java.lang.Object[], java.lang.Object[], byte[]);
  public static final boolean addValueToSet(java.lang.Object, java.lang.Object[], byte[]);
  public static final <K, V> V removeValueInHashTable(K, K[], V[], byte[]);
  public static final int[] keysInHashTable(int[], java.lang.Object[], byte[], int, int);
  public static final <T> T[] valuesInHashTable(int[], T[], byte[], int, int);
  public static final <V> V findValueInHashTable(int, int[], V[], byte[], int, int);
  public static final boolean addValueInHashTable(int, java.lang.Object, int[], java.lang.Object[], byte[], int, int);
  public static final java.lang.Object removeValueInHashTable(int, int[], java.lang.Object[], byte[], int, int);
  public static final <K> K[] keysInHashTable(K[], int[], byte[], int, int);
  public static final int[] valuesInHashTable(java.lang.Object[], int[], byte[], int, int);
  public static final int findValueInHashTable(java.lang.Object, java.lang.Object[], int[], byte[], int, int);
  public static final boolean addValueInHashTable(java.lang.Object, int, java.lang.Object[], int[], byte[], int, int);
  public static final int removeValueInHashTable(java.lang.Object, java.lang.Object[], int[], byte[], int, int);
  static {};
}
