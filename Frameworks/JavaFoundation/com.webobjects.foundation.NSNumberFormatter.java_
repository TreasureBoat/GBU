Compiled from "NSNumberFormatter.java"
public class com.webobjects.foundation.NSNumberFormatter extends java.text.Format {
  public static final java.lang.Class _CLASS;
  public static final int RoundDown;
  public static final int RoundUp;
  public static final int RoundPlain;
  public static final int RoundBankers;
  public static final java.lang.String DefaultPattern;
  public static final java.lang.String _DecimalPattern;
  public static final java.lang.String _IntegerPattern;
  public static final java.lang.String _CurrencyPattern;
  static final long serialVersionUID;
  public static final java.math.BigDecimal NSDecimalNotANumber;
  public com.webobjects.foundation.NSNumberFormatter();
  public com.webobjects.foundation.NSNumberFormatter(java.lang.String);
  public java.lang.String decimalSeparator();
  public void setDecimalSeparator(java.lang.String);
  public java.lang.String thousandSeparator();
  public void setThousandSeparator(java.lang.String);
  public int roundingBehavior();
  public void setRoundingBehavior(int);
  public java.lang.String stringForZero();
  public void setStringForZero(java.lang.String);
  public java.lang.String stringForNull();
  public void setStringForNull(java.lang.String);
  public java.lang.String stringForNotANumber();
  public void setStringForNotANumber(java.lang.String);
  public java.lang.String attributedStringForZero();
  public void setAttributedStringForZero(java.lang.String);
  public java.lang.String attributedStringForNil();
  public void setAttributedStringForNil(java.lang.String);
  public java.lang.String attributedStringForNotANumber();
  public void setAttributedStringForNotANumber(java.lang.String);
  public boolean hasThousandSeparators();
  public void setHasThousandSeparators(boolean);
  public boolean allowsFloats();
  public void setAllowsFloats(boolean);
  public java.math.BigDecimal minimum();
  public void setMinimum(java.math.BigDecimal);
  public java.math.BigDecimal maximum();
  public void setMaximum(java.math.BigDecimal);
  public java.lang.String negativePattern();
  public void setNegativePattern(java.lang.String);
  public java.lang.String positivePattern();
  public void setPositivePattern(java.lang.String);
  public java.lang.String pattern();
  public void setPattern(java.lang.String);
  public java.lang.String negativeFormat();
  public void setNegativeFormat(java.lang.String);
  public java.lang.String positiveFormat();
  public void setPositiveFormat(java.lang.String);
  public java.lang.String format();
  public void setFormat(java.lang.String);
  public boolean localizesFormat();
  public void setLocalizesFormat(boolean);
  public java.lang.String stringForObjectValue(java.lang.Object) throws java.lang.IllegalArgumentException;
  public java.lang.Object objectValueForString(java.lang.String) throws java.text.ParseException;
  public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition);
  public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition);
  public java.lang.Object parseObject(java.lang.String) throws java.text.ParseException;
  public static java.util.Locale[] availableLocales();
  public static java.util.Locale defaultLocale();
  public static void setDefaultLocale(java.util.Locale);
  public java.util.Locale locale();
  public void setLocale(java.util.Locale);
  public static boolean defaultLocalizesPattern();
  public static void setDefaultLocalizesPattern(boolean);
  public boolean localizesPattern();
  public void setLocalizesPattern(boolean);
  public java.lang.String currencySymbol();
  public void setCurrencySymbol(java.lang.String);
  static {};
}
