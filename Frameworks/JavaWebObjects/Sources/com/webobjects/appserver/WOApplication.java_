Compiled from "WOApplication.java"
public class com.webobjects.appserver.WOApplication implements com.webobjects.foundation.NSKeyValueCoding,com.webobjects.foundation.NSKeyValueCoding$ErrorHandling,com.webobjects.foundation.NSKeyValueCodingAdditions,com.webobjects.appserver.WOApplicationMBean {
  long _timeOut;
  protected boolean _cgiAdaptorURLParsed;
  public static final java.lang.String CGIAdaptorURLProperty;
  public static final java.lang.String DocumentRootProperty;
  public static final java.lang.String DirectoryAliasProperty;
  java.util.Timer _applicationTimer;
  protected volatile boolean _terminating;
  public static java.net.URL[] _classPathURLs;
  public boolean _unsetHost;
  public static boolean _wasMainInvoked;
  static com.webobjects.appserver.WOApplication$_LifebeatThread _lifebeatThread;
  public static final java.lang.String _adminRequestHandlerKey;
  protected static volatile long _TheLastApplicationAccessTime;
  static volatile boolean _IsEventLoggingEnabled;
  public static com.webobjects._ideservices._WOLaunchServices _launchServices;
  public static final java.lang.String ApplicationWillFinishLaunchingNotification;
  public static final java.lang.String ApplicationDidFinishLaunchingNotification;
  public static final java.lang.String ApplicationWillDispatchRequestNotification;
  public static final java.lang.String ApplicationDidDispatchRequestNotification;
  public static void main(java.lang.String[]);
  public static void main(java.lang.String[], java.lang.Class);
  static void _setApplication(com.webobjects.appserver.WOApplication);
  public static com.webobjects.appserver.WOApplication application();
  public static void primeApplication(java.lang.String, java.lang.String);
  public static void primeApplication(java.lang.String, java.net.URL, java.lang.String);
  public boolean wasMainInvoked();
  public com.webobjects.eocontrol.EOSharedEditingContext sharedEditingContext();
  com.webobjects.appserver.WOApplication(java.lang.String);
  public com.webobjects.appserver.WOApplication();
  public java.lang.String toString();
  public java.lang.String path();
  public java.lang.String baseURL();
  public java.lang.String getBaseURL();
  public java.lang.String number();
  public java.lang.String name();
  public java.lang.String getName();
  public java.lang.String getWebObjectsVersion();
  public java.util.HashMap<java.lang.String, java.lang.String> getFrameworkVersions();
  public java.util.ArrayList<java.lang.String> getClassPaths();
  public com.webobjects.appserver._WORunLoop _runLoop();
  public void terminate();
  public void _quitTimer();
  java.util.Timer applicationTimer();
  public boolean isTerminating();
  public boolean getIsTerminating();
  public void setTimeOut(double);
  public double timeOut();
  public double getTimeOut();
  public void _terminateOrResetTimer(java.lang.Object);
  public void run();
  public com.webobjects.appserver.WOAdaptor adaptorWithName(java.lang.String, com.webobjects.foundation.NSDictionary<java.lang.String, java.lang.Object>);
  public com.webobjects.foundation.NSArray<com.webobjects.appserver.WOAdaptor> adaptors();
  public com.webobjects.appserver.WOAdaptor defaultAdaptor();
  public java.lang.String getDefaultAdaptor();
  protected void _setAllowsCacheControlHeader(boolean);
  protected boolean _allowsCacheControlHeader();
  public void setResourceManager(com.webobjects.appserver.WOResourceManager);
  public com.webobjects.appserver.WOResourceManager resourceManager();
  public com.webobjects.appserver.WOResponse dispatchRequest(com.webobjects.appserver.WORequest);
  public void awake();
  public void takeValuesFromRequest(com.webobjects.appserver.WORequest, com.webobjects.appserver.WOContext);
  public com.webobjects.appserver.WOActionResults invokeAction(com.webobjects.appserver.WORequest, com.webobjects.appserver.WOContext);
  public void appendToResponse(com.webobjects.appserver.WOResponse, com.webobjects.appserver.WOContext);
  public void sleep();
  public void setSessionStore(com.webobjects.appserver.WOSessionStore);
  public com.webobjects.appserver.WOSessionStore sessionStore();
  public void saveSessionForContext(com.webobjects.appserver.WOContext);
  public com.webobjects.appserver.WOSession restoreSessionWithID(java.lang.String, com.webobjects.appserver.WOContext);
  protected java.lang.Class _sessionClass();
  public com.webobjects.appserver.WOSession createSessionForRequest(com.webobjects.appserver.WORequest);
  public boolean shouldRestoreSessionOnCleanEntry(com.webobjects.appserver.WORequest);
  public void setContextClassName(java.lang.String);
  public java.lang.String contextClassName();
  public com.webobjects.appserver.WOContext createContextForRequest(com.webobjects.appserver.WORequest);
  public com.webobjects.appserver.WOResponse createResponseInContext(com.webobjects.appserver.WOContext);
  public com.webobjects.appserver.WOResourceManager createResourceManager();
  public com.webobjects.appserver.WORequest createRequest(java.lang.String, java.lang.String, java.lang.String, java.util.Map<java.lang.String, ? extends java.util.List<java.lang.String>>, com.webobjects.foundation.NSData, java.util.Map<java.lang.String, java.lang.Object>);
  public com.webobjects.appserver.WOSession _initializeSessionInContext(com.webobjects.appserver.WOContext);
  public int activeSessionsCount();
  protected void _finishInitializingSession(com.webobjects.appserver.WOSession);
  protected void _discountTerminatedSession();
  public void setPageCacheSize(int);
  public int pageCacheSize();
  public int getPageCacheSize();
  public void setPageFragmentCacheSize(int);
  public int pageFragmentCacheSize();
  public int getPageFragmentCacheSize();
  public void setPermanentPageCacheSize(int);
  public int permanentPageCacheSize();
  public void setPageRefreshOnBacktrackEnabled(boolean);
  public boolean isPageRefreshOnBacktrackEnabled();
  public boolean getIsPageRefreshOnBacktrackEnabled();
  public com.webobjects.appserver.WOComponent pageWithName(java.lang.String, com.webobjects.appserver.WOContext);
  public boolean _isPageRecreationEnabled();
  public com.webobjects.appserver.WOElement dynamicElementWithName(java.lang.String, com.webobjects.foundation.NSDictionary<java.lang.String, com.webobjects.appserver.WOAssociation>, com.webobjects.appserver.WOElement, com.webobjects.foundation.NSArray<java.lang.String>);
  protected java.net.URL combinedComponentPathURL(com.webobjects.appserver.WOResourceManager, java.lang.String, java.lang.String, java.lang.String, boolean);
  public boolean _rapidTurnaroundActiveForAnyProject();
  public void _removeComponentDefinitionCacheContents();
  public void _addToExpectedLanguages(com.webobjects.foundation.NSArray<java.lang.String>);
  public com.webobjects.foundation.NSArray<java.lang.String> _expectedLanguages();
  public com.webobjects.appserver._private.WOComponentDefinition _componentDefinitionFromClassNamed(java.lang.String);
  public com.webobjects.appserver._private.WOComponentDefinition _componentDefinition(java.lang.String, com.webobjects.foundation.NSArray<java.lang.String>);
  public void setPrintsHTMLParserDiagnostics(boolean);
  public boolean printsHTMLParserDiagnostics();
  public void setStatisticsStore(com.webobjects.appserver.WOStatisticsStore);
  public com.webobjects.appserver.WOStatisticsStore statisticsStore();
  public com.webobjects.foundation.NSDictionary statistics();
  public synchronized void refuseNewSessions(boolean);
  public boolean isRefusingNewSessions();
  public boolean getIsRefusingNewSessions();
  public void setMinimumActiveSessionsCount(int);
  public int minimumActiveSessionsCount();
  public int getMinimumActiveSessionsCount();
  public com.webobjects.appserver.WOResponse handleSessionCreationErrorInContext(com.webobjects.appserver.WOContext);
  public com.webobjects.appserver.WOResponse handleSessionRestorationErrorInContext(com.webobjects.appserver.WOContext);
  public com.webobjects.appserver.WOResponse handlePageRestorationErrorInContext(com.webobjects.appserver.WOContext);
  public com.webobjects.appserver.WOResponse handleActionRequestError(com.webobjects.appserver.WORequest, java.lang.Exception, java.lang.String, com.webobjects.appserver.WORequestHandler, java.lang.String, java.lang.String, java.lang.Class, com.webobjects.appserver.WOAction);
  public com.webobjects.appserver.WOResponse handleException(java.lang.Exception, com.webobjects.appserver.WOContext);
  public com.webobjects.foundation.NSMutableDictionary<java.lang.String, com.webobjects.foundation.NSMutableArray<java.lang.String>> handleMalformedCookieString(java.lang.RuntimeException, java.lang.String, com.webobjects.foundation.NSMutableDictionary<java.lang.String, com.webobjects.foundation.NSMutableArray<java.lang.String>>);
  public void registerRequestHandler(com.webobjects.appserver.WORequestHandler, java.lang.String);
  public com.webobjects.appserver.WORequestHandler removeRequestHandlerForKey(java.lang.String);
  public com.webobjects.appserver.WORequestHandler defaultRequestHandler();
  public void setDefaultRequestHandler(com.webobjects.appserver.WORequestHandler);
  public com.webobjects.appserver.WORequestHandler requestHandlerForKey(java.lang.String);
  public com.webobjects.foundation.NSArray registeredRequestHandlerKeys();
  public com.webobjects.appserver.WORequestHandler handlerForRequest(com.webobjects.appserver.WORequest);
  public java.lang.String defaultRequestHandlerClassName();
  public void debugString(java.lang.String);
  public static void _debugString(java.lang.String);
  public void logString(java.lang.String);
  public void logTakeValueForDeclarationNamed(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object);
  public void logSetValueForDeclarationNamed(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Object);
  public boolean monitoringEnabled();
  public void terminateAfterTimeInterval(double);
  protected void _terminateFromMonitor();
  public java.lang.String _newLocationForRequest(com.webobjects.appserver.WORequest);
  protected void _openInitialURL();
  public java.lang.String directConnectURL();
  public java.lang.String getDirectConnectURL();
  public java.lang.String webserverConnectURL();
  public java.lang.String getWebserverConnectURL();
  public java.lang.String servletConnectURL();
  public java.lang.String getServletConnectURL();
  public final boolean adaptorsDispatchRequestsConcurrently();
  public boolean getAdaptorsDispatchRequestsConcurrently();
  public final boolean isConcurrentRequestHandlingEnabled();
  public java.lang.Object requestHandlingLock();
  public static final boolean licensingAllowsMultipleInstances();
  public static final boolean licensingAllowsMultipleThreads();
  public static final long licensedRequestWindow();
  public static final int licensedRequestLimit();
  public static final void _setChecksForSpecialHeaders(boolean);
  public static final boolean _checksForSpecialHeaders();
  public void setLoadFrameworks(com.webobjects.foundation.NSArray);
  public com.webobjects.foundation.NSArray loadFrameworks();
  public void setProjectSearchPath(com.webobjects.foundation.NSArray<java.lang.String>);
  public com.webobjects.foundation.NSArray projectSearchPath();
  public void setAdditionalAdaptors(com.webobjects.foundation.NSArray<com.webobjects.foundation.NSDictionary<java.lang.String, java.lang.Object>>);
  public com.webobjects.foundation.NSArray<com.webobjects.foundation.NSDictionary<java.lang.String, java.lang.Object>> additionalAdaptors();
  public java.util.ArrayList<java.util.HashMap<java.lang.String, java.lang.Object>> getAdditionalAdaptors();
  public static boolean _isDebuggingEnabled();
  public boolean isDebuggingEnabled();
  public void setDirectConnectEnabled(boolean);
  public boolean isDirectConnectEnabled();
  public void setCachingEnabled(boolean);
  public boolean isCachingEnabled();
  public boolean getIsCachingEnabled();
  public void setMonitorEnabled(boolean);
  public boolean isMonitorEnabled();
  public boolean getIsMonitorEnabled();
  public void setIncludeCommentsInResponses(boolean);
  public boolean includeCommentsInResponses();
  public boolean getIncludeCommentsInResponses();
  public void setPort(java.lang.Number);
  public java.lang.Number port();
  public int getPort();
  public void _setHost(java.lang.String);
  public java.lang.String host();
  public java.lang.String getHost();
  public void _setHostAddress(java.net.InetAddress);
  public java.net.InetAddress hostAddress();
  public java.lang.String getHostAddress();
  public void setWorkerThreadCount(java.lang.Number);
  public java.lang.Number workerThreadCount();
  public void setWorkerThreadCountMin(java.lang.Number);
  public java.lang.Number workerThreadCountMin();
  public int getWorkerThreadCountMin();
  public void setWorkerThreadCountMax(java.lang.Number);
  public java.lang.Number workerThreadCountMax();
  public int getWorkerThreadCountMax();
  public void setSocketCacheSize(java.lang.Number);
  public java.lang.Number socketCacheSize();
  public void setSocketMonitorSleepTime(java.lang.Number);
  public java.lang.Number socketMonitorSleepTime();
  public void setMaxSocketIdleTime(java.lang.Number);
  public java.lang.Number maxSocketIdleTime();
  public int getMaxSocketIdleTime();
  public void setListenQueueSize(java.lang.Number);
  public java.lang.Number listenQueueSize();
  public int getListenQueueSize();
  public boolean lifebeatEnabled();
  public boolean monitorEnabled();
  public java.lang.String outputPath();
  public java.lang.String getOutputPath();
  protected void _setLifebeatDestinationPort(int);
  public int lifebeatDestinationPort();
  public int getLifebeatDestinationPort();
  public int lifebeatInterval();
  public int getLifebeatInterval();
  public void setMonitorHost(java.lang.String);
  public java.lang.String monitorHost();
  public void setRecordingPath(java.lang.String);
  public java.lang.String recordingPath();
  public void setAutoOpenInBrowser(boolean);
  public boolean autoOpenInBrowser();
  public void setAutoOpenClientApplication(boolean);
  public boolean autoOpenClientApplication();
  public boolean getAutoOpenClientApplication();
  public void setSMTPHost(java.lang.String);
  public java.lang.String SMTPHost();
  public void setAdaptor(java.lang.String);
  public java.lang.String adaptor();
  public void setComponentRequestHandlerKey(java.lang.String);
  public java.lang.String componentRequestHandlerKey();
  public java.lang.String getComponentRequestHandlerKey();
  public void setDirectActionRequestHandlerKey(java.lang.String);
  public java.lang.String directActionRequestHandlerKey();
  public java.lang.String streamActionRequestHandlerKey();
  public void setResourceRequestHandlerKey(java.lang.String);
  public java.lang.String resourceRequestHandlerKey();
  public void setWebServiceRequestHandlerKey(java.lang.String);
  public java.lang.String webServiceRequestHandlerKey();
  public java.lang.String ajaxRequestHandlerKey();
  public void setSessionStoreClassName(java.lang.String);
  public java.lang.String sessionStoreClassName();
  public com.webobjects.appserver.WODynamicURL newDynamicURL();
  public com.webobjects.appserver.WODynamicURL newDynamicURL(java.lang.String) throws com.webobjects.appserver._private.WOURLFormatException;
  public void setFrameworksBaseURL(java.lang.String);
  public java.lang.String frameworksBaseURL();
  public void setCGIAdaptorURL(java.lang.String);
  public java.lang.String cgiAdaptorURL();
  public java.lang.String getCGIAdaptorURL();
  public void setApplicationBaseURL(java.lang.String);
  public java.lang.String applicationBaseURL();
  public java.lang.String getApplicationBaseURL();
  public java.lang.String[] adaptorExtensions();
  public java.lang.String applicationExtension();
  public java.lang.String getApplicationExtension();
  public java.lang.String adaptorName();
  public java.lang.String adaptorPath();
  protected void _parseCGIAdaptorURL();
  public java.lang.String documentRoot();
  public void setAllowsConcurrentRequestHandling(boolean);
  public boolean allowsConcurrentRequestHandling();
  public boolean getAllowsConcurrentRequestHandling();
  public void setSessionTimeOut(java.lang.Number);
  public void setDefaultUndoStackLimit(int);
  public java.lang.Number sessionTimeOut();
  public int getSessionTimeOut();
  public java.lang.Number defaultUndoStackLimit();
  public int getDefaultUndoStackLimit();
  protected com.webobjects.appserver.WOAssociationFactoryRegistry createDefaultAssociationFactoryRegistry();
  public final com.webobjects.appserver.WOAssociationFactory associationFactory();
  public com.webobjects.appserver.WOAssociationFactoryRegistry associationFactoryRegistry();
  protected com.webobjects.appserver.parser.woml.WOMLDefaultNamespaceProvider createDefaultNamespaceProvider();
  public com.webobjects.appserver.parser.woml.WOMLNamespaceProvider namespaceProvider();
  public void setNamespaceProvider(com.webobjects.appserver.parser.woml.WOMLNamespaceProvider);
  protected void _setLockDefaultEditingContext(boolean);
  protected boolean _lockDefaultEditingContext();
  public static boolean canAccessFieldsDirectly();
  public java.lang.Object valueForKey(java.lang.String);
  public void takeValueForKey(java.lang.Object, java.lang.String);
  public java.lang.Object handleQueryWithUnboundKey(java.lang.String);
  public void handleTakeValueForUnboundKey(java.lang.Object, java.lang.String);
  public void unableToSetNullForKey(java.lang.String);
  public java.lang.Object valueForKeyPath(java.lang.String);
  public void takeValueForKeyPath(java.lang.Object, java.lang.String);
  public void validationFailedWithException(java.lang.Throwable, java.lang.Object, java.lang.String, com.webobjects.appserver.WOComponent, com.webobjects.appserver.WOSession);
  public void lock();
  public void unlock();
  public boolean _isSupportedDevelopmentPlatform();
  public boolean _isDomesticSupportedDevelopmentPlatform();
  public boolean _isForeignSupportedDevelopmentPlatform();
  java.lang.Number _refuseNewSessionsTime();
  public com.webobjects.appserver.WOResponse responseForComponentWithName(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.String, ? extends java.util.List<java.lang.String>>, java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.lang.String);
  public com.webobjects.appserver.WOResponse responseForDirectActionWithNameAndClass(java.lang.String, java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.io.InputStream, java.util.Map<java.lang.String, ? extends java.util.List<java.lang.String>>, java.util.Map<java.lang.String, java.lang.Object>, java.lang.String, java.lang.String);
  public java.lang.String getAgentID();
  public java.lang.String sessionIdKey();
  public java.lang.String instanceIdKey();
  public javax.management.MBeanServer getMBeanServer() throws java.lang.IllegalAccessException;
  public java.lang.String getJMXDomain();
  public void setJMXDomain(java.lang.String);
  public void registerMBean(java.lang.Object, javax.management.ObjectName);
  public void registerMBean(java.lang.Object, java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException;
  public void unregisterMBean(javax.management.ObjectName);
  public java.lang.String[] launchArguments();
  static {};
}
